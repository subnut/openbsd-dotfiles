#
# wm independent hotkeys
#

# terminal emulator
super + Return
	urxvtc
	# kitty &> /dev/null
super + shift + Return
	~/.local/bin/st
	# bspc config -d focused window_gap 0; \


# File manager
super + {_,shift +}e
	{nautilus,thunar} &> /dev/null

# program launcher
ctrl + space
	dmenu_run &> /dev/null

super + space
	~/.config/rofi/launcher.sh &> /dev/null

# make sxhkd reload its configuration files:
# super + Escape
# 	pkill -USR1 -x sxhkd

# Restart sxhkd
super + Escape
	pkill sxhkd && exec sxhkd &> /dev/null

# run some custom programs
super + ctrl + Return ; {a,s,d,f,g}
	{librewolf,falkon,otter-browser --new-window,surf -s -z 1.8 https://html.duckduckgo.com/html,firefox} &> /dev/null


# turn off display
# FIXME: This currently doesn't work on OpenBSD. Investigate.
XF86Display
	sleep 0.5 && xset dpms force off


# Emoji input
super + semicolon
	while true; do; \
	emoji="$(jome)";\
	if [ $? -ne 0 ]; then exit 1; fi;\
	sleep 0.5;\
	xdotool type "$emoji";\
	done

super + {ctrl,shift} + semicolon
	emoji="$(jome)";\
	if [ $? -ne 0 ]; then exit 1; fi;\
	sleep 0.6;\
	xdotool type "$emoji"


# toggle polybar
super + p
	bspc config top_padding $((`bspc config bottom_padding` + 35))

super + ctrl + p
	bspc config top_padding $((`bspc config bottom_padding` + 35))

super + shift + p
	bspc config top_padding $(bspc config bottom_padding)


# Lock screen
# super + Print
# 	i3lock -c 00000040 -k --pass-media-keys --pass-screen-keys --radius 180 --ring-width 20 --linecolor 00000000 --ringcolor=ffffff --keyhlcolor=000000 --insidecolor=ffffff --indicator --ringwrongcolor ff2134  --separatorcolor 00000000 --ringvercolor 008cf7 --insidevercolor 008cf7 --insidewrongcolor ff2134 --pass-power-keys --refresh-rate=0.5 --bshlcolor=ff2134 --datestr='%A, %d %b %Y' --redraw-thread

# Screenshot
# Print
# 	flameshot gui &> /dev/null &

# Notification history
# super + Home
# 	kill -s USR1 $(pidof deadd-notification-center)


#
# picom-related shortcuts
#

# exclude rounded corners current window
super + {Delete,shift + BackSpace}
	if [[ $(xprop -id $(bspc query -N -n focused) | grep "_PICOM_ROUND_EXCLUDE" | cut -d'=' -f2 | cut -c2) =~ '1' ]];\
	then xprop -id $(bspc query -N -n focused) -remove _PICOM_ROUND_EXCLUDE;\
	else xprop -id $(bspc query -N -n focused) -f _PICOM_ROUND_EXCLUDE 32c -set _PICOM_ROUND_EXCLUDE 1;\
	fi && picom-trans -c 100

# exclude blur current window
super + shift + Delete
	if [[ $(xprop -id $(bspc query -N -n focused) | grep "_PICOM_BLUR_EXCLUDE" | cut -d'=' -f2 | cut -c2) =~ '1' ]];\
	then xprop -id $(bspc query -N -n focused) -f _PICOM_BLUR_EXCLUDE 32c -set _PICOM_BLUR_EXCLUDE 0;\
	else xprop -id $(bspc query -N -n focused) -f _PICOM_BLUR_EXCLUDE 32c -set _PICOM_BLUR_EXCLUDE 1;\
	fi
	# if [[ $(xprop -id $(bspc query -N -n focused) | grep "_PICOM_BLUR_EXCLUDE" | cut -d'=' -f2 | cut -c2) =~ '1' ]];\
	# then xprop -id $(bspc query -N -n focused) -remove _PICOM_BLUR_EXCLUDE;\
	# else xprop -id $(bspc query -N -n focused) -f _PICOM_BLUR_EXCLUDE 32c -set _PICOM_BLUR_EXCLUDE 1;\
	# fi && picom-trans -c 100

# exclude focus-unfocus current window
super + ctrl + Delete
	if [[ $(xprop -id $(bspc query -N -n focused) | grep "_PICOM_FOCUS_EXCLUDE" | cut -d'=' -f2 | cut -c2) =~ '1' ]];\
	then xprop -id $(bspc query -N -n focused) -f _PICOM_FOCUS_EXCLUDE 32c -set _PICOM_FOCUS_EXCLUDE 0;\
	else xprop -id $(bspc query -N -n focused) -f _PICOM_FOCUS_EXCLUDE 32c -set _PICOM_FOCUS_EXCLUDE 1;\
	fi

#
# opacity (picom-trans)
#

# Coarse control
super + {minus,equal}
	picom-trans -c {-,+}15

# Shift ==> Finer control
super + shift + {minus,equal}
	picom-trans -c {-,+}5

# Reset opacity / Make transparent
super + {_,shift + }0
	picom-trans -c {100,0}


# clipboard selection - clipster
super + Insert
	clipster -s



#
# bspwm hotkeys
#

# quit/restart bspwm
super + alt + {q,r}
	bspc {quit,wm -r}

# close
super + q
	bspc node -c

# kill
ctrl + alt + Delete
	bspc node -k

# alternate between the tiled and monocle layout
super + m
	bspc desktop -l next

#
# state/flags
#

# set the window state
super + {t,s,f}
	bspc node -t {tiled,floating || bspc node -t "~floating",fullscreen || bspc node -t "~fullscreen"}
super + shift + {t,s}
	bspc node -t pseudo_tiled || bspc node -t "~pseudo_tiled"

# set the node flags
# sticky  => show on all desktops (of current monitor)
# marked  => to send to presel'd node
super + ctrl + {s,m}
	bspc node -g {sticky,marked}

# locked  => ignore "node --close" (super + q)
super + {ctrl,shift,ctrl + shift} + q
	bspc node -g locked


#
# focus/swap
#

# focus the node in the given direction
#super + {_,shift + }{h,j,k,l}
#	bspc node -{f,s} {west,south,north,east}

super + {h,j,k,l}
	bspc node -f {west,south,north,east}

# send node for presel || swap node in given direction
super + shift + {h,j,k,l}
	bspc node -n {west.!automatic || bspc node -s west,south.!automatic || bspc node -s south,north.!automatic || bspc node -s north ,east.!automatic || bspc node -s east}

# focus the next/previous node/desktop in the current desktop
super + {_,shift + }Tab
	bspc desktop -f {next,prev}.local

# focus nodes, not leaves
alt + {_,shift + } + {_,ctrl} +Tab
	bspc node -f {next,prev}.local.{leaf,\!leaf} || bspc node -f next.local.leaf

# focus the last node/desktop
{alt,super} + grave
	bspc {node,desktop} -f last.local



# focus or send to the given desktop
#super + {_,shift + }{1-9,0}
#	bspc {desktop -f,node -d} '^{1-9,10}'

super + {_,shift + }{1-9}
	bspc {desktop -f,node -d} focused:'^{1-9}'.local || if bspc query -N -n focused.sticky -d focused;\
	then notify-send "Node sticky" -a "bspwm" -t 1000 -u critical;\
	else notify-send "No node to send" -a "bspwm" -t 1000 -u critical;\
	fi

super + {_,shift + }F{1-9}
	bspc {desktop -f,node -d} focused:'^1{1-9}'.local || if bspc query -N -n focused.sticky -d focused;\
	then notify-send "Node sticky" -a "bspwm" -t 1000 -u critical;\
	else notify-send "No node to send" -a "bspwm" -t 1000 -u critical;\
	fi
super + {_,shift + }F1{0-2}
	bspc {desktop -f,node -d} focused:'^2{0-2}'.local || if bspc query -N -n focused.sticky -d focused;\
	then notify-send "Node sticky" -a "bspwm" -t 1000 -u critical;\
	else notify-send "No node to send" -a "bspwm" -t 1000 -u critical;\
	fi


# focus the prev/next unoccupied/occupied desktop
super + {_,shift + }{u,o}
	bspc desktop -f {next,prev}.local.{!,_}occupied


# send to the prev/next desktop
super + shift + {Prior,Next}
	bspc node -d {next,prev}.local || if bspc query -N -n focused.sticky -d focused;\
	then notify-send "Node sticky" -a "bspwm" -t 1000 -u critical;\
	else notify-send "No node to send" -a "bspwm" -t 1000 -u critical;\
	fi

# Swap current desktop with given desktop
super + ctrl + {1-9}
	bspc desktop -s '^{1-9}'.local || if bspc query -N -n .sticky -d focused;\
	then notify-send "Sticky node present. Can't swap." -a "bspwm" -t 1000 -u critical;\
	else notify-send "Self-swap not allowed" -a "bspwm" -t 1000 -u critical;\
	fi
super + ctrl + F{1-9}
	bspc desktop -s '^1{1-9}'.local || if bspc query -N -n .sticky -d focused;\
	then notify-send "Sticky node present. Can't swap." -a "bspwm" -t 1000 -u critical;\
	else notify-send "Self-swap not allowed" -a "bspwm" -t 1000 -u critical;\
	fi
super + ctrl + F1{0-9}
	bspc desktop -s '^2{0-9}'.local || if bspc query -N -n .sticky -d focused;\
	then notify-send "Sticky node present. Can't swap." -a "bspwm" -t 1000 -u critical;\
	else notify-send "Self-swap not allowed" -a "bspwm" -t 1000 -u critical;\
	fi

super + ctrl + {Prior,Next}
	bspc desktop -s {prev,next}.local || if bspc query -N -n .sticky -d focused;\
	then notify-send "Sticky node present. Can't swap." -a "bspwm" -t 1000 -u critical;\
	fi

#
# preselect
#

# preselect the direction
super + alt + {h,j,k,l}
	bspc node -p {west,south,north,east}

# preselect the ratio
super + alt + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
# super + alt + space
# 	bspc node -p cancel

# cancel the preselection for the focused desktop
# super + ctrl + shift + space
super + alt + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# move below/above/normal in the stack
super + {b,a,n}
	bspc node focused -l {below,above,normal}

# send the newest marked node to the newest preselected node
super + y
	bspc node newest.marked.local -n newest.!automatic.local

# move node to presel
super + alt + shift + {h,j,k,l}
	bspc node -n {west,south,north,east}.!automatic

# expand a window by moving one of its side outward
super + ctrl + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}
# finer control
super + ctrl + {Left,Down,Up,Right}
	bspc node -z {left -1 0,bottom 0 1,top 0 -1,right 1 0}

# contract a window by moving one of its side inward
super + ctrl + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}
# finer control
super + ctrl + shift + {Left,Down,Up,Right}
	bspc node -z {right -1 0,top 0 1,bottom 0 -1,left 1 0}

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}
# finer control
super + shift + {Left,Down,Up,Right}
	bspc node -v {-1 0,0 1,0 -1,1 0}



#
# padding
#

# decrease/increase window_gap
super + bracket{left,right}
	bspc config -d focused window_gap $(( `bspc config -d focused window_gap ` {-,+} 10 ))

# decrease screen padding
super + comma
	bspc config -d focused right_padding $((`bspc config -d focused right_padding` - 20 )); \
	bspc config -d focused left_padding $((`bspc config -d focused left_padding` - 20 )); \
	bspc config -d focused bottom_padding $((`bspc config -d focused bottom_padding` - 20 )); \
	bspc config -d focused top_padding $((`bspc config -d focused top_padding` - 20 ));
# increase screen padding
super + period
	bspc config -d focused right_padding $((`bspc config -d focused right_padding` + 20 )); \
	bspc config -d focused left_padding $((`bspc config -d focused left_padding` + 20 )); \
	bspc config -d focused bottom_padding $((`bspc config -d focused bottom_padding` + 20 )); \
	bspc config -d focused top_padding $((`bspc config -d focused top_padding` + 20 ));


#
# Multi-monitor control
#

# Swap focused desktop with focused desktop of last monitor
super + ctrl + grave
	bspc desktop -s $(bspc query --desktops -d last:focused) --follow || if bspc query -N -n .sticky -d focused;\
	then notify-send "Sticky node present. Can't swap." -a "bspwm" -t 1000 -u critical;\
	else notify-send "Self-swap not allowed" -a "bspwm" -t 1000 -u critical;\
	fi

# Focus Monitors
super + ctrl + {_,shift + }Tab
	bspc monitor -f {next,prev}

#
# Parent node commands
#

# Circulate children nodes
~alt + {shift + ,_} + c
	bspc query -N --node .focused.!window &> /dev/null && bspc node -C {backward,forward}

# Rotate layout
~alt + {_,shift} + r
	bspc query -N --node .focused.!window &> /dev/null && bspc node -R {+,-}90

# Flip layout
~alt + {h,j,k,l}
	bspc query -N --node .focused.!window &> /dev/null && bspc node -F {vertical,horizontal,horizontal,vertical}


# Equalize/Reset sizing of child nodes
~alt + e
	bspc query -N --node .focused.!window &> /dev/null && bspc node -E


# vim: ft=sxhkdrc cms=#%s
